from aiogram import Bot, Dispatcher, types, executor
import asyncio
import json

API_TOKEN = '8077962203:AAHHndkIuMJz__r2nOimrh2CGG8vS8OLCDo'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    btn_start = types.InlineKeyboardButton("üöÄ Start", callback_data="start")
    markup.add(btn_start)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ù–∞–∂–º–∏—Ç–µ 'Start', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ Start
@dp.callback_query_handler(lambda call: call.data == "start")
async def handle_start(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    btn_kz = types.InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data="country_kz")
    btn_ru = types.InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="country_ru")
    btn_az = types.InlineKeyboardButton("üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", callback_data="country_az")
    markup.add(btn_kz, btn_ru, btn_az)

    await call.message.edit_text("–ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã? –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –∫—É—Ä—Å–∞ –≤ –≤–∞—à–µ–π –≤–∞–ª—é—Ç–µ.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
@dp.callback_query_handler(lambda call: call.data.startswith("country_"))
async def handle_country(call: types.CallbackQuery):
    country_code = call.data.split("_")[1]
    countries = {"kz": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "ru": "–†–æ—Å—Å–∏—è", "az": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω"}
    country = countries.get(country_code, "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")

    user_data[call.message.chat.id] = {"country": country}

    markup = types.InlineKeyboardMarkup()
    btn_questions = types.InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="questions")
    btn_courses = types.InlineKeyboardButton("üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å–∞–º", callback_data="courses")
    markup.add(btn_questions, btn_courses)

    await call.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ {country}. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–æ–ø—Ä–æ—Å—ã'. –õ–∏–±–æ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda call: call.data == "questions")
async def questions(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    btn_q1 = types.InlineKeyboardButton("–¢–æ—á–Ω–æ –ª–∏ –≤—ã —Å–∫–∏–Ω–µ—Ç–µ –∫—É—Ä—Å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã?", callback_data="question_1")
    btn_q2 = types.InlineKeyboardButton("–ö–∞–∫ –¥–æ–ª–≥–æ –¥–ª–∏—Ç—Å—è –∫—É—Ä—Å?", callback_data="question_2")
    btn_q3 = types.InlineKeyboardButton("–ï—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏?", callback_data="question_3")
    btn_q4 = types.InlineKeyboardButton("–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏?", callback_data="question_4")
    btn_q5 = types.InlineKeyboardButton("–ö–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —è –ø–æ–ª—É—á—É?", callback_data="question_5")
    markup.add(btn_q1, btn_q2)
    markup.add(btn_q3, btn_q4)
    markup.add(btn_q5)

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@dp.callback_query_handler(lambda call: call.data.startswith("question_"))
async def handle_questions(call: types.CallbackQuery):
    answers = {
        "question_1": "–î–∞, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.",
        "question_2": "–ö—É—Ä—Å –¥–ª–∏—Ç—Å—è 4 –Ω–µ–¥–µ–ª–∏, –≤–∫–ª—é—á–∞—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–¥–∞–Ω–∏—è.",
        "question_3": "–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.",
        "question_4": "–î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ –∫—É—Ä—Å –≤–∞–º –Ω–µ –ø–æ–¥–æ—à–µ–ª.",
        "question_5": "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, PDF-–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É."
    }
    await call.message.answer(answers[call.data])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤
@dp.callback_query_handler(lambda call: call.data == "courses")
async def handle_courses(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    btn_ds = types.InlineKeyboardButton("üß™ Data Science", callback_data="course_ds")
    btn_da = types.InlineKeyboardButton("üìä Data Analytics", callback_data="course_da")
    markup.add(btn_ds, btn_da)

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
@dp.callback_query_handler(lambda call: call.data.startswith("course_"))
async def handle_selected_course(call: types.CallbackQuery):
    course_code = call.data.split("_")[1]
    courses = {"ds": "Data Science", "da": "Data Analytics"}
    course = courses.get(course_code, "Data Science")

    if course == "Data Science":
        await bot.send_photo(call.message.chat.id, open("Resources/dataSciencePhoto.jpeg", 'rb'))
        await bot.send_video(call.message.chat.id, open("Resources/videoDataScience.mp4", 'rb'))
    elif course == "Data Analytics":
        await bot.send_photo(call.message.chat.id, open("Resources/dataAnalysticsPhoto.jpeg", 'rb'))
        await bot.send_video(call.message.chat.id, open("Resources/videoDataAnalystics.mp4", 'rb'))

    await asyncio.sleep(1)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å {course}. –í–æ—Ç –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ.")

    markup = types.InlineKeyboardMarkup()
    btn_pay = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")
    markup.add(btn_pay)
    await call.message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å, –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å'.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda call: call.data == "pay")
async def handle_payment(call: types.CallbackQuery):
    country = user_data.get(call.message.chat.id, {}).get("country", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")

    if country == "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
        price = "20,000 —Ç–≥"
    elif country == "–†–æ—Å—Å–∏—è":
        price = "3900 —Ä—É–±–ª–µ–π"
    elif country == "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω":
        price = "68 –º–∞–Ω–∞—Ç"
    else:
        price = "20,000 —Ç–≥"

    await call.message.answer(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: {price}. –ö—É—Ä—Å –±—ã–ª –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
